        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 100%
       11:   12:int Password::count_leading_characters(string phrase){
       11:   13:  int repetition = 1;
       11:   14:  int index = 0;
       11:   15:  if (phrase.length() == 0) return 0;
call    0 returned 11
branch  1 taken 1 (fallthrough)
branch  2 taken 10
      319:   16:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 319
branch  1 taken 313 (fallthrough)
branch  2 taken 6
call    3 returned 313
call    4 returned 313
branch  5 taken 309 (fallthrough)
branch  6 taken 4
branch  7 taken 309
branch  8 taken 10 (fallthrough)
      309:   17:    repetition++;
      309:   18:    index++;
        -:   19:  }
       10:   20:  return repetition;
        -:   21:}
        -:   22:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 100% blocks executed 100%
        4:   23:bool Password::has_mixed_case(string phrase){
        4:   24:  bool upper = false;
        4:   25:  bool lower = false;
        4:   26:  int index = 0;
        4:   27:  if (phrase.length() == 0) return false;
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
       12:   28:  while(index < phrase.length() - 1){
call    0 returned 12
branch  1 taken 11
branch  2 taken 1 (fallthrough)
       11:   29:    if (isupper(phrase[index])) upper = true;
call    0 returned 11
branch  1 taken 2 (fallthrough)
branch  2 taken 9
       11:   30:    if (islower(phrase[index])) lower = true;
call    0 returned 11
branch  1 taken 9 (fallthrough)
branch  2 taken 2
       11:   31:    if (upper && lower) return true;
branch  0 taken 4 (fallthrough)
branch  1 taken 7
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        9:   32:    index++;
        -:   33:  }
        1:   34:  return false;
        -:   35:}
        -:   36:
function _ZN8PasswordC2Ev called 16 returned 100% blocks executed 53%
       16:   37:Password::Password(){
call    0 returned 16
       16:   38:  pass_history.push_back("ChicoCA-95929");
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 16
branch  5 taken 16 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 16
call    8 returned 16
call    9 never executed
call   10 never executed
       16:   39:}
call    0 never executed
        -:   40:
        -:   41:/*receives a password and sets the latest in pass_history to it if and only
        -:   42:  if it meets all criteria:
        -:   43:    1. The password is at least 8 letters long, but no longer than 20
        -:   44:    2. It has no more than 3 of the same leading characters
        -:   45:    3. It has mixed case (at least one upper case and at least one lower case)
        -:   46:    4. It was not a previous password in the history*/
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 72%
        1:   47:void Password::set(string phrase){
        1:   48:  if (phrase.size() >= 8){
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   49:    if (count_leading_characters(phrase) <= 3){
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0
call    7 never executed
call    8 never executed
        1:   50:      if (has_mixed_case(phrase)){
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0
call    7 never executed
        -:   51:        if (true){
        1:   52:          pass_history.push_back(phrase);
call    0 returned 1
        -:   53:        }
        -:   54:      }
        -:   55:    }
        -:   56:  }
        1:   57:}
        -:   58:
        -:   59:
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 100%
        3:   60:bool Password::authenticate(string phrase){
        3:   61:  int index = 0;
        3:   62:  bool go = true;
        -:   63:  //matching characters between phrase and history
       14:   64:  while( go ){
branch  0 taken 12
branch  1 taken 2 (fallthrough)
       12:   65:    if ( phrase[index] == pass_history[pass_history.size()-1][index] ){
call    0 returned 12
call    1 returned 12
call    2 returned 12
call    3 returned 12
branch  4 taken 2 (fallthrough)
branch  5 taken 10
        2:   66:      go = false;
        -:   67:    }
       12:   68:    index++;
       12:   69:    if (index == phrase.length()-1) break;
call    0 returned 12
branch  1 taken 1 (fallthrough)
branch  2 taken 11
        -:   70:  }
        3:   71:  return !go;
        -:   72:}
